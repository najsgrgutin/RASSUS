{"ast":null,"code":"var _jsxFileName = \"/Users/matejjuric/Desktop/Frontend/pages/login.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport Router from 'next/router';\nimport { useForm } from \"react-hook-form\";\nimport queryString from \"querystring\";\nimport axios from \"axios\";\nimport styles from \"../styles/Login.module.css\";\nimport ErrorMessage from \"../components/ErrorMessage\";\n\nvar Login = function Login() {\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors;\n\n  var _useState = useState(false),\n      showError = _useState[0],\n      setShowError = _useState[1];\n\n  function handleLoginClick(data) {\n    var params = {\n      client_secret: \"489eedf0-1ad8-4ebd-bf60-426709339e66\",\n      username: data.username,\n      password: data.password,\n      grant_type: \"password\",\n      client_id: \"frontend\"\n    };\n    axios({\n      method: \"post\",\n      url: \"http://localhost:8080/auth/realms/govanj/protocol/openid-connect/token\",\n      data: queryString.stringify(params),\n      config: {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n      }\n    }).then(function (res) {\n      if (res.request.status !== 200) {\n        console.log(\"Not authorized\");\n        return;\n      }\n\n      console.log(res.data.access_token);\n      Router.push(\"/registration\");\n    })[\"catch\"](function (error) {\n      console.error(error);\n    });\n  }\n\n  return __jsx(\"form\", {\n    className: styles.loginContainer,\n    onSubmit: handleSubmit(handleLoginClick),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    className: styles.loginTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Login\"), __jsx(\"input\", {\n    className: styles.loginInput,\n    placeholder: \"Username\",\n    name: \"username\",\n    ref: register({\n      required: true\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: styles.mailErrorMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, errors[\"username\"] && errors[\"username\"].message), __jsx(\"input\", {\n    className: styles.loginInput,\n    placeholder: \"Password\",\n    name: \"password\",\n    type: \"password\",\n    ref: register({\n      required: true\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    className: styles.loginButton,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Login\"), showError ? __jsx(ErrorMessage, {\n    message: \"Wrong username or password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }) : null);\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/matejjuric/Desktop/Frontend/pages/login.js"],"names":["React","useState","Router","useForm","queryString","axios","styles","ErrorMessage","Login","register","handleSubmit","errors","showError","setShowError","handleLoginClick","data","params","client_secret","username","password","grant_type","client_id","method","url","stringify","config","headers","then","res","request","status","console","log","access_token","push","error","loginContainer","loginTitle","loginInput","required","mailErrorMessage","message","loginButton"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Router from 'next/router'\nimport { useForm } from \"react-hook-form\";\nimport queryString from \"querystring\";\nimport axios from \"axios\";\nimport styles from \"../styles/Login.module.css\";\nimport ErrorMessage from \"../components/ErrorMessage\";\n\nconst Login = () => {\n  const { register, handleSubmit, errors } = useForm();\n\n  const [showError, setShowError] = useState(false);\n\n  function handleLoginClick(data) {\n    const params = {\n      client_secret: \"489eedf0-1ad8-4ebd-bf60-426709339e66\",\n      username: data.username,\n      password: data.password,\n      grant_type: \"password\",\n      client_id: \"frontend\"\n    };\n\n    axios({\n      method: \"post\",\n      url: \"http://localhost:8080/auth/realms/govanj/protocol/openid-connect/token\",\n      data: queryString.stringify(params),\n      config: {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n      }\n    }).then(res => {\n      if (res.request.status !== 200){\n        console.log(\"Not authorized\");\n        return;\n      }\n      console.log(res.data.access_token);\n      Router.push(\"/registration\");\n    })\n      .catch(error => {\n        console.error(error);\n      });\n  }\n\n  return (\n    <form\n      className={styles.loginContainer}\n      onSubmit={handleSubmit(handleLoginClick)}\n    >\n      <h1 className={styles.loginTitle}>Login</h1>\n      <input\n        className={styles.loginInput}\n        placeholder=\"Username\"\n        name=\"username\"\n        ref={register({\n          required: true\n        })}\n      />\n      <div className={styles.mailErrorMessage}>\n        {errors[\"username\"] && errors[\"username\"].message}\n      </div>\n      <input\n        className={styles.loginInput}\n        placeholder=\"Password\"\n        name=\"password\"\n        type=\"password\"\n        ref={register({\n          required: true\n        })}\n      />\n      <button className={styles.loginButton} type=\"submit\">\n        Login\n      </button>\n      {showError ? (\n        <ErrorMessage message={\"Wrong username or password\"} />\n      ) : null}\n    </form>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}